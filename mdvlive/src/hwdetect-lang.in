#
# LiveCD hardware detection script language strings
#
# Copyright (C) 2004, Jaco Greeff <jaco@puxedo.org>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# The latest version of this script can be found at http://livecd.berlios.de
#
# $Id: hwdetect-lang.in,v 1.1 2005/06/11 13:52:09 alain Exp $
#

sub getLanguages() {
	(
	   'en'    => 0,
	   'en_US' => 0,
	   'en_GB' => 0
	);
}

sub getStrings() {
	(
	'script_start'     => [ "Starting hardware detection", undef ],

	'OK'               => [ "  OK  ", undef ],
	'LOADED'           => [ "LOADED", undef ],
	'WARN'             => [ " WARN ", undef ],
	'FAILED'           => [ "FAILED", undef ],

	'arch_probe'       => [ "Detecting architecture",  undef ],
	'arch_cpus'        => [ "CPUs", undef ],
	'arch_mem_found'   => [ "memory found", undef ],
	'avail_mem'        => [ "Available Memory",  undef ],
	'avail_swap'       => [ "Available Swap",  undef ],
	
	# Available memory 128KB ***of*** 640KB 
	'of_mem'           => [ "of",  undef ],

	'pci_probe'        => [ "Probing PCI controllers",  undef ],
	'all_probe'        => [ "Probing devices",  undef ],
	'found'            => [ "found", undef ], # 10 ***found***

	'pcmcia_init'      => [ "Initialising PCMCIA controllers",  undef ],
	'pcmcia_load'      => [ "Loading base PCMCIA modules",  undef ],

	'usb_init'         => [ "Initialising USB controllers",  undef ],
	'usb_load'         => [ "Loading base USB modules",  undef ],
	'usb_mount'        => [ "Mounting USB filesystem",  undef ],
	'usb_umount'       => [ "Unmounting USB filesystem",  undef ],
	'usb_probe'        => [ "Detecting USB devices",  undef ],

	'keyboard_probe'   => [ "Selecting keyboard",  undef ],
	'mouse_probe'      => [ "Detecting mouse", undef ],
	'video_probe'      => [ "Detecting video cards", undef ],
	'monitor_probe'    => [ "Selecting monitor", undef ],
	'resolution_probe' => [ "Selecting resolution", undef ],
	'x_write'          => [ "Writing X configuration", undef ],

	'skip_sata'	   => [ "noscsi option: Skipping SATA detection", undef ],
	'sound_probe'      => [ "Detecting sound cards", undef ],
	'network_probe'    => [ "Detecting network cards", undef ],
	'printer_probe'    => [ "Detecting local printers", undef ],

	'serial_probe'     => [ "Detecting serial devices", undef ],
	# Detecting serial devices: ***(not implemented)***
	'not_impl'         => [ "(not implemented)", undef ],

	'mod_read'         => [ "Reading modules configuration", undef ],
	'mod_write'        => [ "Writing modules configuration", undef ],
	'mod_loaded'	   => [ "Module loaded", undef ],

	'disk_probe'       => [ "Detecting disk drives/partitions", undef ],
	'disk_persist'     => [ "Finding persistent partitions", undef ],
	'disk_write'       => [ "Writing partition configuration", undef ],
	'disk_create'      => [ "Creating device mountpoints", undef ],
	'disk_fstab_info'  => [ "Entries below this line were automatically added by", undef ],
	'disk_fstab_loop'  => [ "Loop image for above partition", undef ],
	'swap_activate'    => [ "Activating swap partitions", undef ]
	);
}

sub getMyLang() {
	my $language = $languages{en};
	if (defined($cmdline) && 
	    defined($cmdline{lang}) &&
	    defined($languages{$cmdline{lang}})) {
		$language = $languages{$cmdline{lang}};
	}
	$language;
}

sub getStr {
	my ($idx) = @_;
	my $str = $strings{$idx}[$lang];
	if (!defined($str)) {
		$str = $strings{$idx}[0];
		if (!defined($str)) {
			$str = "INVALID $idx";
		}
	}
	$str;
}

