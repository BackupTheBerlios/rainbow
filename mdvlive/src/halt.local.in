#!/initrd/bin/ash
#
# This script is part of mklivecd and is here to:
#   1) Check if we should eject the CD
#   2) If so unmount the cloop and CD, ensuring we have everything necessary
#      below
#   3) Eject the CD with a prompt (so eject must be in memory)
#   4) Run /sbin/halt as it would normally be run, but halt needs to be in
#      memory. We call it because the halt script would call /sbin/halt
#      where /sbin was a link to the cloop image (no longer accessible) so we
#      either need to have our own halt or pivot_root
#
# Copyright (C) 2003, Buchan Milne <bgmilne@obsidian.co.za>
# Copyright (C) 2003-2004, Jaco Greeff <jaco@puxedo.org>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# The latest version of this script can be found at http://livecd.berlios.de
#
# $Id: halt.local.in,v 1.1 2005/06/11 13:52:09 alain Exp $
#

export PATH=/initrd/bin:/initrd/usr/bin:/initrd/sbin:/initrd/usr/sbin:/bin:/usr/bin:/sbin:/usr/sbin

# Variables
MNTCDROM="/cdrom"
MNTLIVECD="/loopfs"
HALTCMD="$1"

# should we eject the CD?
EJECT=1
grep -q noeject /proc/cmdline && EJECT=

# find our loop device and module
DEVLOOP=`grep /initrd/loopfs /proc/mounts | awk '{ print $1 }'`
LOOPMOD=`echo $DEVLOOP | awk -F / '{ print $3 }'`

# We probably want to be able to localise this:
MSG="Remove the CD, and press [Enter] to power the computer off"

### screen colors
RES_COL=65
MOVE_TO_COL="echo -en \\033[${RES_COL}G\\033[K"
SETCOLOR_OK="echo -en \\033[1;32m"
SETCOLOR_FAIL="echo -en \\033[1;31m"
SETCOLOR_WARN="echo -en \\033[1;33m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"
SETCOLOR_CLEAR="echo -en \\033c"
SETCOLOR_CEOL="echo -en \\033[0G\\033[K"


### print a success msg
printok() {
	$MOVE_TO_COL
	echo -n "[  "
	$SETCOLOR_OK
	echo -n "OK"
	$SETCOLOR_NORMAL
	echo "  ]"
	return 0
}

### print a fialure msg
printfail() {
	$MOVE_TO_COL
	echo -n "["
	$SETCOLOR_FAIL
	echo -n "FAILED"
	$SETCOLOR_NORMAL
	echo "]"
	return 0
}

### execute a command/commands printing the sucess or failure msg on completion
docmd() {
	echo -n "$1: "
	shift
	CMD="($1)"
	shift
	while [ $# -gt 0 ]; do
		CMD="$CMD && ($1)"
		shift
	done
	(eval "$CMD") 2>&1 >/dev/null && printok || printfail
}

# Copy the binaries we need (Done in rc.sysinit now)
#docmd   "Copying halt and reboot binaries" \
#	"cp -f /sbin/halt /sbin/reboot /initrd/sbin"

# move our /proc and /dev mounts and pivot (setting correct paths)
docmd   "Performing initrd pivot" \
	"/initrd/sbin/pivot_root /initrd /initrd/ramfs" \
	"umount /ramfs/proc"

docmd   "Unmounting $MNTLIVECD" \
	"umount $MNTLIVECD 2>/dev/null"

# Unload the loop module before trying to umount/eject CD
if [ -n "$DEVLOOP" ]; then
	docmd   "Removing loop module" \
		"losetup -d $DEVLOOP" \
		"rmmod $LOOPMOD >/dev/null 2>/dev/null"
fi
	
# Turn on autoeject of CD-Rom
# (Stolen from the knoppix-reboot script)
for dev in /proc/sys/dev/cdrom*/lock; do
	[ -f "$dev" ] && echo 0 > "$dev"
done
if [ -n "$EJECT" ]; then
	for dev in /proc/sys/dev/cdrom*/autoeject; do
		[ -f "$dev" ] && echo 1 > "$dev"
	done
fi

docmd   "Unmounting $MNTCDROM" \
	"umount $MNTCDROM"

# We can unmount proc now
docmd   "Unmounting /proc" \
	"umount /proc"

# Hope this works ;-)
[ -z "$HALTCMD" ] && HALTCMD=/sbin/halt
echo -n "Please stand by... "
exec $HALTCMD -i -d -p
